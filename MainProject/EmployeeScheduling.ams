## ams_version=1.0

Model Main_EmployeeScheduling {
	Comment: {
		"Keywords:
		Employee assignment problem, scheduling."
	}
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: {
					minute->s : #-># * 60,
					day->s : #-># * 86400
				}
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit day has been added automatically because it is a required unit for calendar \"c_days\"."
				}
			}
		}
		Section Inputs {
			Section Calendars {
				Calendar c_days {
					Index: i_day;
					Unit: day;
					BeginDate: sp_todayDate;
					EndDate: sp_yearLaterDate;
					TimeslotFormat: "%c%y-%m-%d";
				}
				StringParameter sp_todayDate {
					Definition: {
						CurrentToString("%c%y-%m-%d");
					}
				}
				StringParameter sp_tomorrowDate {
					Definition: {
						MomentToString("%c%y-%m-%d",
						    [day],
						    sp_todayDate,
						    1[day]);
					}
				}
				StringParameter sp_yearLaterDate {
					Definition: {
						(val(CurrentToString("%c%y")) + 1)
						+ CurrentToString("-%m-%d")
					}
				}
			}
			Section Shifts {
				Set s_shifts {
					Index: i_sh;
					Parameter: ep_selectedShift;
				}
				Set s_activeShifts {
					SubsetOf: s_shifts;
					Index: i_act_sh;
					Definition: {
						{i_sh | p_activeShift(i_sh)}
					}
				}
				Parameter p_activeShift {
					IndexDomain: i_sh;
					Range: binary;
				}
				Parameter p_startTime {
					IndexDomain: (i_sh);
					InitialData: 0;
				}
				Parameter p_duration {
					IndexDomain: (i_sh);
					InitialData: 0;
				}
			}
			Section Skills {
				Set s_skills {
					Index: i_sk;
					Parameter: ep_selectedSkill;
				}
				Set s_activeSkills {
					SubsetOf: s_skills;
					Index: i_act_sk;
					Definition: {
						{i_sk | p_activeSkill(i_sk)}
					}
				}
				Parameter p_activeSkill {
					IndexDomain: i_sk;
					Range: binary;
				}
			}
			Section Restaurants {
				Set s_restaurants {
					Index: i_rest;
					Parameter: ep_selectedRestaurant;
					OrderBy: i_rest;
				}
				Set s_activeRestaurants {
					SubsetOf: s_restaurants;
					Index: i_act_rest;
					Definition: {
						{i_rest | p_activeRestaurant(i_rest)}
					}
				}
				Parameter p_activeRestaurant {
					IndexDomain: i_rest;
					Range: binary;
				}
				StringParameter sp_restaurantDescription {
					IndexDomain: i_rest;
				}
				DeclarationSection Demand {
					Parameter p_demand {
						IndexDomain: (i_rest,i_sh,i_sk);
						Text: "The needed number of skilled employees in the restaurants";
						Range: integer;
						InitialData: 0;
					}
				}
			}
			Section Employees {
				Set s_employees {
					Index: i_empl;
					Parameter: ep_selectedEmployee;
				}
				Set s_activeEmployees {
					SubsetOf: s_employees;
					Index: i_act_empl;
					Definition: {
						{i_empl | p_activeEmployee(i_empl)}
					}
				}
				Parameter p_activeEmployee {
					IndexDomain: i_empl;
					Range: binary;
				}
				StringParameter sp_employeeDescription {
					IndexDomain: i_empl;
				}
				DeclarationSection Employee_Shift {
					Parameter p_employeeDoesShift {
						IndexDomain: (i_empl,i_sh);
						Text: "Employees\' availability for shifts";
						Range: binary;
					}
				}
				DeclarationSection Employee_Skill {
					Parameter p_employeeSkillPreference {
						IndexDomain: (i_empl,i_sk) | p_employeeHasSkill(i_empl,i_sk);
						Text: "Job preferences of the employees (lower number means preferred position)";
					}
					Parameter p_employeeHasSkill {
						IndexDomain: (i_empl,i_sk);
						Text: "Employees\' skills";
						Range: binary;
					}
				}
			}
			Procedure pr_randomizeData {
				Body: {
					if card(s_activeShifts) + card(s_activeSkills) + card(s_activeRestaurants) + card(s_activeEmployees) > 0 then
					    p_demand(i_rest,i_sh,i_sk) | 
					            (p_activeShift(i_sh)
					            and p_activeSkill(i_sk)
					            and p_activeRestaurant(i_rest))
					    :=  round(Uniform(0,4));
					
					    p_employeeDoesShift(i_empl,i_sh) | 
					            (p_activeShift(i_sh)
					            and p_activeEmployee(i_empl))
					    := round(uniform(0,1)/3*4);
					
					    p_employeeHasSkill(i_empl,i_sk) | 
					            (p_activeSkill(i_sk)
					            and p_activeEmployee(i_empl))
					    := round(uniform(0,1)/3*4);
					
					    p_employeeSkillPreference(i_empl,i_sk)  | 
					            (p_activeSkill(i_sk)
					            and p_activeEmployee(i_empl))
					    :=  round(uniform(0.5,3.49));
					else
					    webui::RequestPerformWebUIDialog(
					        title   :  "Not Enough", 
					        message :  "Not enough data inputed. Please check.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1'); 
					endif;
				}
				Set s_loc_actions {
					InitialData: {
						{'OK'}
					}
				}
			}
		}
		Section Math_Model {
			Variable v_assignment {
				IndexDomain: (i_rest,i_empl,i_sh,i_sk);
				Text: "Employees\' work schedule";
				Range: binary;
			}
			Variable v_unfulfilled {
				IndexDomain: (i_rest,i_sh,i_sk);
				Text: "Unfulfilled positions";
				Range: nonnegative;
				webui::AnnotationsIdentifier: sp_unfulfilledDemandAnnotation;
			}
			Constraint c_satisfyDemand {
				IndexDomain: (i_rest,i_sh,i_sk);
				Text: "The number of assigned employees has to be equal to the needed number of employees minus the unfulfilled positions";
				Definition: {
					sum(i_empl, v_assignment(i_rest,i_empl,i_sh,i_sk)) 
					= 
					p_demand(i_rest,i_sh,i_sk) 
					- 
					v_unfulfilled(i_rest,i_sh,i_sk)
				}
			}
			Constraint c_assignmentSatisfiesShift {
				IndexDomain: (i_empl,i_sh);
				Text: "If the employee is available for a shift, then he or she can be assigned, else not";
				Definition: {
					sum((i_rest,i_sk), v_assignment(i_rest,i_empl,i_sh,i_sk)) 
					<= 
					p_employeeDoesShift(i_empl,i_sh)
				}
			}
			Constraint c_assignmentSatisfiesSkills {
				IndexDomain: (i_rest,i_empl,i_sh,i_sk);
				Text: "If the employee has the needed skill for a postion, he or she can be assigned, else not";
				Definition: {
					v_assignment(i_rest,i_empl,i_sh,i_sk) 
					<= 
					p_employeeHasSkill(i_empl,i_sk)
				}
			}
			Constraint c_maximumOfOneShift {
				IndexDomain: (i_empl);
				Text: "An employee cannot do more then one shift";
				Definition: {
					sum((i_rest,i_sh,i_sk),v_assignment(i_rest,i_empl,i_sh,i_sk)) 
					<= 
					1
				}
			}
			Parameter p_unfulfilledWeightingFactor {
				Text: "The cost factor of an unfulfilled postion";
				InitialData: 1000;
			}
			Variable v_unfulfilledCost {
				Text: "The total cost caused by unfulfilled postions";
				Definition: {
					sum((i_rest,i_sh,i_sk), 
					    v_unfulfilled(i_rest,i_sh,i_sk) 
					    * p_unfulfilledWeightingFactor)
				}
			}
			Variable v_notPreferenceCost {
				Text: "The total cost caused by assigning employees for less preferred postions";
				Definition: {
					sum((i_rest,i_empl,i_sh,i_sk), 
					    v_assignment(i_rest,i_empl,i_sh,i_sk) 
					    * p_employeeSkillPreference(i_empl,i_sk))
				}
			}
			Variable v_totalCost {
				Text: "The total cost of the schedule";
				Definition: v_unfulfilledCost + v_notPreferenceCost;
			}
			Set s_employeeAssignmentConstraints {
				SubsetOf: AllConstraints;
				Definition: AllConstraints * Math_Model;
			}
			Set s_employeeAssignmentVariables {
				SubsetOf: AllVariables;
				Definition: AllVariables * Math_Model;
			}
			MathematicalProgram mp_minimizeCost {
				Objective: v_totalCost;
				Direction: minimize;
				Constraints: s_employeeAssignmentConstraints;
				Variables: s_employeeAssignmentVariables;
				Type: Automatic;
			}
			DeclarationSection Model_Information {
				ElementParameter ep_programStatus {
					Range: AllSolutionStates;
					Property: NoSave;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_gap {
					Property: NoSave;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_numberOfConstraints {
					Property: NoSave;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_numberOfVariables {
					Property: NoSave;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_solutionTime {
					Unit: s;
					Property: NoSave;
					InitialData: 0;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
			}
			Procedure pr_modelInformation {
				Body: {
					empty Model_Information;
					
					ep_programStatus := mp_minimizeCost.ProgramStatus;
					p_gap := abs(1 - (mp_minimizeCost.Objective /$ mp_minimizeCost.BestBound));
					p_solutionTime := mp_minimizeCost.SolutionTime;
					p_numberOfConstraints := mp_minimizeCost.NumberOfConstraints;
					p_numberOfVariables := mp_minimizeCost.NumberOfVariables;
				}
			}
			Procedure pr_runModel {
				Body: {
					solve mp_minimizeCost;
					
					pr_modelInformation;
					
					if ep_programStatus = 'Optimal' then
					    webui::RequestPerformWebUIDialog(
					        title   :  "Solve Completed", 
					        message :  "Solve completed successfully. Redirecting to results page.", 
					        actions :  s_loc_actions, 
					        onDone  :  'pr_openRedirectPage');   
					else
					    webui::RequestPerformWebUIDialog(
					        title   :  "Solve Completed", 
					        message :  "Solve completed unsuccessfully. Please check.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1');           
					endif;
				}
				Set s_loc_actions {
					InitialData: {
						{'Ok'}
					}
				}
			}
			Procedure pr_openRedirectPage {
				Arguments: (sp_loc_action);
				Body: {
					webui::OpenPage(pageId :  'results');
				}
				StringParameter sp_loc_action {
					Property: Input;
				}
			}
		}
		Section Outputs {
			Parameter p_assignment {
				IndexDomain: (i_rest, i_empl, i_sh, i_sk);
				Definition: v_assignment(i_rest, i_empl, i_sh, i_sk);
			}
		}
	}
	Section UI_Declarations {
		Procedure pr_empty;
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome"            ,  ( 1, 1, icon              ) : "aimms-happy"        ,
					  ( 1, 1, pageId            ) : "home"               ,  ( 1, 1, tooltip           ) : "welcome"            ,
					  ( 1, 1, workflowPageState ) : "active"             ,  ( 1, 1, pageDataState     ) : "Incomplete"         ,
					  ( 1, 2, displayText       ) : "Story"              ,  ( 1, 2, icon              ) : "aimms-lamp5"        ,
					  ( 1, 2, pageId            ) : "story"              ,  ( 1, 2, tooltip           ) : "Problem description",
					  ( 1, 2, workflowPageState ) : "active"             ,  ( 1, 2, pageDataState     ) : "Incomplete"         ,
					  ( 1, 2, redirectPageId    ) : "home"               ,  ( 1, 3, displayText       ) : "Master"             ,
					  ( 1, 3, icon              ) : "aimms-equalizer2"   ,  ( 1, 3, pageId            ) : "inputs"             ,
					  ( 1, 3, tooltip           ) : "Master data"        ,  ( 1, 3, workflowPageState ) : "active"             ,
					  ( 1, 3, pageDataState     ) : "Incomplete"         ,  ( 1, 3, redirectPageId    ) : "home"               ,
					  ( 1, 4, displayText       ) : "Transactional"      ,  ( 1, 4, icon              ) : "aimms-equalizer2"   ,
					  ( 1, 4, pageId            ) : "transactional_data" ,  ( 1, 4, tooltip           ) : "Transactional data" ,
					  ( 1, 4, workflowPageState ) : "active"             ,  ( 1, 4, pageDataState     ) : "Incomplete"         ,
					  ( 1, 4, redirectPageId    ) : "home"               ,  ( 1, 5, displayText       ) : "Results"            ,
					  ( 1, 5, icon              ) : "aimms-make-group"   ,  ( 1, 5, pageId            ) : "results"            ,
					  ( 1, 5, tooltip           ) : "Model outputs"      ,  ( 1, 5, workflowPageState ) : "active"             ,
					  ( 1, 5, pageDataState     ) : "Incomplete"         ,  ( 1, 5, redirectPageId    ) : "home"               ,
					  ( 1, 6, displayText       ) : "Gantt"              ,  ( 1, 6, icon              ) : "aimms-wall"         ,
					  ( 1, 6, pageId            ) : "gantt"              ,  ( 1, 6, tooltip           ) : "Gantt chart"        ,
					  ( 1, 6, workflowPageState ) : "active"             ,  ( 1, 6, pageDataState     ) : "Incomplete"         ,
					  ( 1, 6, redirectPageId    ) : "home"                }
				}
			}
		}
		Section CRUD {
			StringParameter sp_addEditElement {
				InitialData: "";
				webui::AnnotationsIdentifier: sp_annotationCRUD;
			}
			StringParameter sp_annotationCRUD {
				Definition: {
					if sp_addEditElement then 
					    "green-input"
					else 
					    "red-input"
					endif;
				}
			}
			Section CRUD_Restaurant {
				Procedure pr_openAddRestaurant {
					Body: {
						empty sp_addEditElement;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Add Restaurant", 
							actions :  s_loc_actions, 
							onDone  :  'pr_addRestaurant');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_addRestaurant {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    ep_selectedRestaurant := StringToElement(s_restaurants, sp_addEditElement, 1);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_openEditRestaurant {
					Body: {
						sp_addEditElement := ep_selectedRestaurant;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Edit Restaurant", 
							actions :  s_loc_actions, 
							onDone  :  'pr_editRestaurant');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_editRestaurant {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    SetElementRename(s_restaurants, ep_selectedRestaurant, sp_addEditElement);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_deleteRestaurant {
					Body: {
						s_restaurants -= ep_selectedRestaurant;
						
						ep_selectedRestaurant := first(i_rest);
					}
				}
			}
			Section CRUD_Employee {
				Procedure pr_openAddEmployee {
					Body: {
						empty sp_addEditElement;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Add Employee", 
							actions :  s_loc_actions, 
							onDone  :  'pr_addEmployee');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_addEmployee {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    ep_selectedEmployee := StringToElement(s_Employees, sp_addEditElement, 1);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_openEditEmployee {
					Body: {
						sp_addEditElement := ep_selectedEmployee;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Edit Employee", 
							actions :  s_loc_actions, 
							onDone  :  'pr_editEmployee');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_editEmployee {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    SetElementRename(s_Employees, ep_selectedEmployee, sp_addEditElement);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_deleteEmployee {
					Body: {
						s_Employees -= ep_selectedEmployee;
						
						ep_selectedEmployee := first(i_empl);
					}
				}
			}
			Section CRUD_Shift {
				Procedure pr_openAddShift {
					Body: {
						empty sp_addEditElement;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Add Shift", 
							actions :  s_loc_actions, 
							onDone  :  'pr_addShift');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_addShift {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    ep_selectedShift := StringToElement(s_Shifts, sp_addEditElement, 1);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_openEditShift {
					Body: {
						sp_addEditElement := ep_selectedShift;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Edit Shift", 
							actions :  s_loc_actions, 
							onDone  :  'pr_editShift');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_editShift {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    SetElementRename(s_Shifts, ep_selectedShift, sp_addEditElement);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_deleteShift {
					Body: {
						s_Shifts -= ep_selectedShift;
						
						ep_selectedShift := first(i_sh);
					}
				}
			}
			Section CRUD_Skill {
				Procedure pr_openAddSkill {
					Body: {
						empty sp_addEditElement;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Add Skill", 
							actions :  s_loc_actions, 
							onDone  :  'pr_addSkill');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_addSkill {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    ep_selectedSkill := StringToElement(s_Skills, sp_addEditElement, 1);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_openEditSkill {
					Body: {
						sp_addEditElement := ep_selectedSkill;
						
						webui::OpenDialogPage(
							pageId  :  'crud', 
							title   :  "Edit Skill", 
							actions :  s_loc_actions, 
							onDone  :  'pr_editSkill');
					}
					Set s_loc_actions {
						InitialData: {
							{'Cancel', 'OK'}
						}
					}
				}
				Procedure pr_editSkill {
					Arguments: sp_arg_action;
					Body: {
						if sp_arg_action = 'OK' then
						    SetElementRename(s_Skills, ep_selectedSkill, sp_addEditElement);
						endif;
					}
					StringParameter sp_arg_action {
						Property: Input;
					}
				}
				Procedure pr_deleteSkill {
					Body: {
						s_Skills -= ep_selectedSkill;
						
						ep_selectedSkill := first(i_sk);
					}
				}
			}
		}
		Section Pages {
			Section Master_Page {
				DeclarationSection Master_PageAction {
					StringParameter sp_masterSecondaryActions {
						IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
						Definition: {
							data 
							{ ( 1, displaytext ) : "Import"                ,  ( 1, icon        ) : "aimms-database-insert" ,
							  ( 1, procedure   ) : "pr_readAll"            ,  ( 1, state       ) : "active"                ,
							  ( 2, displaytext ) : "Export"                ,  ( 2, icon        ) : "aimms-database-export" ,
							  ( 2, procedure   ) : "pr_writeAll"           ,  ( 2, state       ) : "active"                ,
							  ( 3, displaytext ) : "Generate Random"       ,  ( 3, icon        ) : "aimms-database-refresh",
							  ( 3, procedure   ) : "pr_randomizeData"      ,  ( 3, state       ) : "active"                ,
							  ( 4, displaytext ) : "Solve"                 ,  ( 4, icon        ) : "aimms-cog"             ,
							  ( 4, procedure   ) : "pr_runModel"           ,  ( 4, state       ) : "active"                ,
							  ( 5, displaytext ) : "Case Manager"             ,  ( 5, icon        ) : "aimms-floppy-disk"     ,
							  ( 5, procedure   ) : "pr_openCaseManagerDialog"                ,  ( 5, state       ) : "active"                 }
						}
					}
					StringParameter sp_restaurantItemActions {
						IndexDomain: (webui::indexWidgetItemActionSpec,webui::indexPageExtension,webui::indexWidgetActionSpec);
						Definition: {
							data 
							{ ( p_activeRestaurant      , 1, displaytext ) : "Add",
							  ( p_activeRestaurant      , 1, icon        ) : "aimms-plus3",
							  ( p_activeRestaurant      , 1, procedure   ) : "pr_openAddRestaurant",
							  ( p_activeRestaurant      , 1, state       ) : "active",
							  ( p_activeRestaurant      , 2, displaytext ) : "Edit",
							  ( p_activeRestaurant      , 2, icon        ) : "aimms-pencil2",
							  ( p_activeRestaurant      , 2, procedure   ) : "pr_openEditRestaurant",
							  ( p_activeRestaurant      , 2, state       ) : "active",
							  ( p_activeRestaurant      , 3, displaytext ) : "Delete",
							  ( p_activeRestaurant      , 3, icon        ) : "aimms-eraser2",
							  ( p_activeRestaurant      , 3, procedure   ) : "pr_deleteRestaurant",
							  ( p_activeRestaurant      , 3, state       ) : "active",
							  ( sp_restaurantDescription, 1, displaytext ) : "Add",
							  ( sp_restaurantDescription, 1, icon        ) : "aimms-plus3",
							  ( sp_restaurantDescription, 1, procedure   ) : "pr_openAddRestaurant",
							  ( sp_restaurantDescription, 1, state       ) : "active",
							  ( sp_restaurantDescription, 2, displaytext ) : "Edit",
							  ( sp_restaurantDescription, 2, icon        ) : "aimms-pencil2",
							  ( sp_restaurantDescription, 2, procedure   ) : "pr_openEditRestaurant",
							  ( sp_restaurantDescription, 2, state       ) : "active",
							  ( sp_restaurantDescription, 3, displaytext ) : "Delete",
							  ( sp_restaurantDescription, 3, icon        ) : "aimms-eraser2",
							  ( sp_restaurantDescription, 3, procedure   ) : "pr_deleteRestaurant",
							  ( sp_restaurantDescription, 3, state       ) : "active" }
						}
					}
					StringParameter sp_employeeItemActions {
						IndexDomain: (webui::indexWidgetItemActionSpec,webui::indexPageExtension,webui::indexWidgetActionSpec);
						Definition: {
							data 
							{ ( p_activeEmployee      , 1, displaytext ) : "Add",
							  ( p_activeEmployee      , 1, icon        ) : "aimms-plus3",
							  ( p_activeEmployee      , 1, procedure   ) : "pr_openAddEmployee",
							  ( p_activeEmployee      , 1, state       ) : "active",
							  ( p_activeEmployee      , 2, displaytext ) : "Edit",
							  ( p_activeEmployee      , 2, icon        ) : "aimms-pencil2",
							  ( p_activeEmployee      , 2, procedure   ) : "pr_openEditEmployee",
							  ( p_activeEmployee      , 2, state       ) : "active",
							  ( p_activeEmployee      , 3, displaytext ) : "Delete",
							  ( p_activeEmployee      , 3, icon        ) : "aimms-eraser2",
							  ( p_activeEmployee      , 3, procedure   ) : "pr_deleteEmployee",
							  ( p_activeEmployee      , 3, state       ) : "active",
							  ( sp_employeeDescription, 1, displaytext ) : "Add",
							  ( sp_employeeDescription, 1, icon        ) : "aimms-plus3",
							  ( sp_employeeDescription, 1, procedure   ) : "pr_openAddEmployee",
							  ( sp_employeeDescription, 1, state       ) : "active",
							  ( sp_employeeDescription, 2, displaytext ) : "Edit",
							  ( sp_employeeDescription, 2, icon        ) : "aimms-pencil2",
							  ( sp_employeeDescription, 2, procedure   ) : "pr_openEditEmployee",
							  ( sp_employeeDescription, 2, state       ) : "active",
							  ( sp_employeeDescription, 3, displaytext ) : "Delete",
							  ( sp_employeeDescription, 3, icon        ) : "aimms-eraser2",
							  ( sp_employeeDescription, 3, procedure   ) : "pr_deleteEmployee",
							  ( sp_employeeDescription, 3, state       ) : "active" }
						}
					}
					StringParameter sp_shiftItemActions {
						IndexDomain: (webui::indexWidgetItemActionSpec,webui::indexPageExtension,webui::indexWidgetActionSpec);
						Definition: {
							data 
							{ ( p_activeShift, 1, displaytext ) : "Add"                  ,  ( p_activeShift, 1, icon        ) : "aimms-plus3"          ,
							  ( p_activeShift, 1, procedure   ) : "pr_openAddShift" ,  ( p_activeShift, 1, state       ) : "active"               ,
							  ( p_activeShift, 2, displaytext ) : "Edit"                 ,  ( p_activeShift, 2, icon        ) : "aimms-pencil2"        ,
							  ( p_activeShift, 2, procedure   ) : "pr_openEditShift",  ( p_activeShift, 2, state       ) : "active"               ,
							  ( p_activeShift, 3, displaytext ) : "Delete"               ,  ( p_activeShift, 3, icon        ) : "aimms-eraser2"        ,
							  ( p_activeShift, 3, procedure   ) : "pr_deleteShift"  ,  ( p_activeShift, 3, state       ) : "active"               ,
							  ( p_duration   , 1, displaytext ) : "Add"                  ,  ( p_duration   , 1, icon        ) : "aimms-plus3"          ,
							  ( p_duration   , 1, procedure   ) : "pr_openAddShift" ,  ( p_duration   , 1, state       ) : "active"               ,
							  ( p_duration   , 2, displaytext ) : "Edit"                 ,  ( p_duration   , 2, icon        ) : "aimms-pencil2"        ,
							  ( p_duration   , 2, procedure   ) : "pr_openEditShift",  ( p_duration   , 2, state       ) : "active"               ,
							  ( p_duration   , 3, displaytext ) : "Delete"               ,  ( p_duration   , 3, icon        ) : "aimms-eraser2"        ,
							  ( p_duration   , 3, procedure   ) : "pr_deleteShift"  ,  ( p_duration   , 3, state       ) : "active"               ,
							  ( p_startTime  , 1, displaytext ) : "Add"                  ,  ( p_startTime  , 1, icon        ) : "aimms-plus3"          ,
							  ( p_startTime  , 1, procedure   ) : "pr_openAddShift" ,  ( p_startTime  , 1, state       ) : "active"               ,
							  ( p_startTime  , 2, displaytext ) : "Edit"                 ,  ( p_startTime  , 2, icon        ) : "aimms-pencil2"        ,
							  ( p_startTime  , 2, procedure   ) : "pr_openEditShift",  ( p_startTime  , 2, state       ) : "active"               ,
							  ( p_startTime  , 3, displaytext ) : "Delete"               ,  ( p_startTime  , 3, icon        ) : "aimms-eraser2"        ,
							  ( p_startTime  , 3, procedure   ) : "pr_deleteShift"  ,  ( p_startTime  , 3, state       ) : "active"                }
						}
					}
					StringParameter sp_skillItemActions {
						IndexDomain: (webui::indexWidgetItemActionSpec,webui::indexPageExtension,webui::indexWidgetActionSpec);
						Definition: {
							data 
							{ ( p_activeSkill, 1, displaytext ) : "Add"                  ,  ( p_activeSkill, 1, icon        ) : "aimms-plus3"          ,
							  ( p_activeSkill, 1, procedure   ) : "pr_openAddSkill" ,  ( p_activeSkill, 1, state       ) : "active"               ,
							  ( p_activeSkill, 2, displaytext ) : "Edit"                 ,  ( p_activeSkill, 2, icon        ) : "aimms-pencil2"        ,
							  ( p_activeSkill, 2, procedure   ) : "pr_openEditSkill",  ( p_activeSkill, 2, state       ) : "active"               ,
							  ( p_activeSkill, 3, displaytext ) : "Delete"               ,  ( p_activeSkill, 3, icon        ) : "aimms-eraser2"        ,
							  ( p_activeSkill, 3, procedure   ) : "pr_deleteSkill"  ,  ( p_activeSkill, 3, state       ) : "active"                }
						}
					}
				}
			}
			Section Transactional_Page {
				DeclarationSection Transactional_PageAction {
					StringParameter sp_transactionalSecondaryActions {
						IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
						Definition: {
							data 
							{ ( 1, displaytext ) : "Import"                ,  ( 1, icon        ) : "aimms-database-insert" ,
							  ( 1, procedure   ) : "pr_readAll"            ,  ( 1, state       ) : "active"                ,
							  ( 2, displaytext ) : "Export"                ,  ( 2, icon        ) : "aimms-database-export" ,
							  ( 2, procedure   ) : "pr_writeAll"           ,  ( 2, state       ) : "active"                ,
							  ( 3, displaytext ) : "Generate Random"       ,  ( 3, icon        ) : "aimms-database-refresh",
							  ( 3, procedure   ) : "pr_randomizeData"      ,  ( 3, state       ) : "active"                ,
							  ( 4, displaytext ) : "Solve"                 ,  ( 4, icon        ) : "aimms-cog"             ,
							  ( 4, procedure   ) : "pr_runModel"           ,  ( 4, state       ) : "active"                ,
							  ( 5, displaytext ) : "Case Manager"             ,  ( 5, icon        ) : "aimms-floppy-disk"     ,
							  ( 5, procedure   ) : "pr_openCaseManagerDialog"                ,  ( 5, state       ) : "active"                 }
						}
					}
				}
			}
			Section Results_Page {
				StringParameter sp_resultsSecondaryActions {
					IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
					Definition: {
						data 
						{ ( 1, displaytext ) : "Case Manager"            ,  ( 1, icon        ) : "aimms-floppy-disk"       ,
						  ( 1, procedure   ) : "pr_openCaseManagerDialog",  ( 1, state       ) : "active"                   }
					}
				}
				StringParameter sp_resultsSidePanel {
					IndexDomain: (webui::indexPageExtension,webui::indexSidePanelSpec);
					Definition: {
						data 
						{ ( 1, displayText ) : "KPIs"             ,  ( 1, pageId      ) : "informations"     ,
						  ( 1, icon        ) : "aimms-question"   ,  ( 1, state       ) : "active"           ,
						  ( 2, displayText ) : "Model Information",  ( 2, pageId      ) : "model_information",
						  ( 2, icon        ) : "aimms-info"       ,  ( 2, state       ) : "active"            }
					}
				}
				Parameter p_fulfilledDemand {
					IndexDomain: (i_rest, i_sh, i_sk);
					Range: integer;
					Definition: p_demand(i_rest, i_sh, i_sk) - v_unfulfilled(i_rest, i_sh, i_sk);
					webui::AnnotationsIdentifier: sp_fulfilledDemandAnnotation;
				}
				StringParameter sp_demandFulfillmentTitle {
					Definition: "Demand Fulfillment - " + ep_selectedRestaurant;
				}
				StringParameter sp_fulfilledDemandAnnotation {
					Definition: "not-red-chart";
				}
				StringParameter sp_unfulfilledDemandAnnotation {
					Definition: "red-chart";
				}
			}
			Section Gantt_Page {
				StringParameter sp_ganttSecondaryActions {
					IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
					Definition: {
						data 
						{ ( 1, displaytext ) : "Case Manager"            ,  ( 1, icon        ) : "aimms-floppy-disk"       ,
						  ( 1, procedure   ) : "pr_openCaseManagerDialog",  ( 1, state       ) : "active"                   }
					}
				}
				Parameter p_restaurantStartTime {
					IndexDomain: (i_rest, i_empl, i_sh, i_sk) | p_assignment(i_rest,i_empl,i_sh,i_sk);
					Definition: p_startTime(i_sh);
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_restaurantDuration {
					IndexDomain: (i_rest,i_empl,i_sh,i_sk) | p_assignment(i_rest,i_empl,i_sh,i_sk);
					Definition: p_duration(i_sh);
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				StringParameter sp_restaurantTitle {
					Definition: ep_selectedRestaurant + " Schedule";
				}
				StringParameter sp_employeeTitle {
					Definition: ep_selectedEmployee + " Schedule";
				}
			}
			Section Case_Manager_DialogPage {
				StringParameter sp_caseName {
					InitialData: "<insert case name>";
				}
				StringParameter sp_def_uploadLabel {
					Definition: "Load Scenario As Active";
				}
				StringParameter sp_def_downloadLabel {
					Definition: "Save Scenario As";
				}
				Procedure pr_uploadSavedScenario {
					Arguments: (sp_in_fileLocation,StatusCode,StatusDescription);
					Body: {
						! https://documentation.aimms.com/webui/upload-widget.html#filelocation
						sp_loc_fileLocation := webui::GetIOFilePath(sp_in_fileLocation);
						
						! load the scenario
						CaseFileLoad(sp_loc_fileLocation);
						CaseFileSetCurrent(sp_loc_fileLocation);
						
						! checking if the previous read statement was successful or not
						if CurrentCase <> '' then
						
						   ! if successful, statusCode is set to 'OK' which will trigger the WebUI to show the message below in a grey box
						   StatusCode := webui::ReturnStatusCode('OK');
						
						   ! displaying the status message, and logging it in the WebUI messages
						   StatusDescription := "Case was loaded successfully.";
						
						else    !if previous read statement was not successful
						
						   ! setting the statusCode to 'ERROR'
						   statusCode := webui::ReturnStatusCode('ERROR');
						
						   !displaying a custom error message
						   statusDescription := "Could not read the case file.";
						
						endif;
						
						FileDelete(sp_loc_fileLocation);
					}
					Comment: "More documentation about Upload Widget here: https://documentation.aimms.com/webui/upload-widget.html";
					StringParameter sp_in_fileLocation {
						Property: Input;
					}
					Parameter StatusCode {
						Property: Output;
						Comment: "this exact name is expected";
					}
					StringParameter StatusDescription {
						Property: Output;
						Comment: "this exact name is expected";
					}
					StringParameter sp_loc_fileLocation;
				}
				Procedure pr_downloadCurrentScenario {
					Arguments: (FileLocation,statusCode,statusDescription);
					Body: {
						! if the temp folder exists, deleate and create new
						if DirectoryExists( "temp_data" ) then
						    DirectoryDelete("temp_data");
						endif;
						DirectoryCreate("temp_data");
						
						if sp_caseName <> "" or sp_caseName <> "<insert case name>" then
						    sp_loc_completeCaseName := sp_caseName + ".data";
						    CaseFileSave("temp_data\\" + sp_loc_completeCaseName, AllIdentifiers);
						
						    ! from temp_data folder to Main Directory folder
						    FileCopy("temp_data\\" + sp_loc_completeCaseName, sp_loc_completeCaseName);
						    FileLocation :=  sp_loc_completeCaseName;
						
						    ! we store the location of the file in string parameter FinalLocation
						    FinalLocation  := webui::GetIOFilePath(sp_loc_completeCaseName);
						
						    ! checking if the previous write statement was successful or not
						    if FileExists(FinalLocation) then
						
						        ! if successful, statusCode is set to 'CREATED' which will trigger the download widget to show the Get button
						        StatusCode := webui::ReturnStatusCode('CREATED');
						        ! displaying the status message as All perfect instead of the default "File ready to download"
						        StatusDescription := "All perfect!";
						
						    else    !if previous write statement was not successful
						
						        ! setting the statusCode to 'ERROR' and the download widget will not show the Get button anymore
						        statusCode := webui::ReturnStatusCode('ERROR');
						        !displaying a custom error message
						        statusDescription := "Something went wrong when creating the file.";
						
						    endif;
						
						else 
						
						    ! setting the statusCode to 'ERROR' and the download widget will not show the Get button anymore
						    statusCode := webui::ReturnStatusCode('ERROR');
						    !displaying a custom error message
						    statusDescription := "Please give the case a name.";
						
						endif;
					}
					Comment: "More documentation about Download Widget here: https://documentation.aimms.com/webui/download-widget.html";
					StringParameter FileLocation {
						Property: Output;
					}
					StringParameter FinalLocation;
					StringParameter sp_loc_completeCaseName;
					Parameter statusCode {
						Property: Output;
					}
					StringParameter statusDescription {
						Property: Output;
					}
					StringParameter sp_loc_fileLocation;
					StringParameter sp_TextOfUploadedFile;
				}
				Procedure pr_openCaseManagerDialog {
					Body: {
						s_loc_actions := {'OK'};
						
						webui::OpenDialogPage(
							pageId  :  'save_case', 
							title   :  "Case Manager", 
							actions :  s_loc_actions, 
							onDone  :  'webui::NoOp1');
					}
					Set s_loc_actions;
				}
			}
		}
		Section FlagsIdentifier {
			StringParameter sp_readOnlyFlag {
				Definition: "readonly";
			}
		}
	}
	Section Database_Connection {
		StringParameter sp_connectionString {
			Definition: {
				SQLCreateConnectionString (
					DatabaseInterface              :  'odbc',
					DriverName                     :  "SQLite3 ODBC Driver",
					ServerName                     :  "", 
					DatabaseName                   :  "inputs.db", !The path of your database
					UserId                         :  "", 
					Password                       :  "", 
					AdditionalConnectionParameters :  "") ;
			}
		}
		Procedure pr_readAll {
			Body: {
				!check if driver exists
				p_loc_numberOfDrivers := SQLNumberOfDrivers('ODBC');
				
				while LoopCount <= p_loc_numberOfDrivers do
				    sp_loc_driverName := SQLDriverName('ODBC', LoopCount);
				
				    if sp_loc_driverName = "SQLite3 ODBC Driver" then
				        pr_readSkillDB;
				        pr_readShiftDB;
				        pr_readEmployeeDB;
				        pr_readRestaurantDB;
				        pr_readEmployeeShiftsDB;
				        pr_readEmployeeSkillDB;
				        pr_readDemandDB;
				        break;
				    endif;                
				endwhile;
				
				s_loc_actions := {'Cancel'};
				
				if sp_loc_driverName <> "SQLite3 ODBC Driver" then
				    webui::RequestPerformWebUIDialog(
				            title   :  "Minimal Requirements", 
				            message :  "Please install 'SQLite3 ODBC Driver' and try again.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				endif;
			}
			Parameter p_loc_numberOfDrivers;
			StringParameter sp_loc_driverName;
			Set s_loc_actions;
		}
		Procedure pr_writeAll {
			Body: {
				!check if driver exists
				p_loc_numberOfDrivers := SQLNumberOfDrivers('ODBC');
				
				while LoopCount <= p_loc_numberOfDrivers do
				    sp_loc_driverName := SQLDriverName('ODBC', LoopCount);
				
				    if sp_loc_driverName = "SQLite3 ODBC Driver" then
				        pr_writeSkillDB;
				        pr_writeShiftDB;
				        pr_writeEmployeeDB;
				        pr_writeRestaurantDB;
				        pr_writeEmployeeShiftsDB;
				        pr_writeEmployeeSkillDB;
				        pr_writeDemandDB;
				        break;
				    endif;                
				endwhile;
				
				s_loc_actions := {'Cancel'};
				
				if sp_loc_driverName <> "SQLite3 ODBC Driver" then
				    webui::RequestPerformWebUIDialog(
				            title   :  "Minimal Requirements", 
				            message :  "Please install 'SQLite3 ODBC Driver' and try again.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				endif;
			}
			Parameter p_loc_numberOfDrivers;
			StringParameter sp_loc_driverName;
			Set s_loc_actions;
		}
		Section DB_Skills {
			DatabaseTable db_readSkills {
				DataSource: sp_connectionString;
				TableName: "skill";
				Mapping: {
					"id"     -->i_sk,
					"active" -->p_activeSkill( i_sk )
				}
			}
			Procedure pr_readSkillDB {
				Body: {
					empty Skills;
					
					read from table db_readSkills;
				}
			}
			Procedure pr_writeSkillDB {
				Body: {
					write p_activeSkill(i_sk)
					    to table db_readSkills in dense mode;
				}
			}
		}
		Section DB_Shifts {
			DatabaseTable db_readShifts {
				DataSource: sp_connectionString;
				TableName: "shift";
				Mapping: {
					"id"         -->i_sh,
					"active"     -->p_activeShift(i_sh),
					"start_time" -->p_startTime(i_sh),
					"duration" -->p_duration(i_sh)
				}
			}
			Procedure pr_readShiftDB {
				Body: {
					empty Shifts;
					read from table db_readShifts;
				}
			}
			Procedure pr_writeShiftDB {
				Body: {
					write p_activeShift(i_sh), 
					        p_startTime(i_sh),
					        p_duration(i_sh)
					    to table db_readShifts in dense mode;
				}
			}
		}
		Section DB_Employee {
			DatabaseTable db_readEmployees {
				DataSource: sp_connectionString;
				TableName: "employee";
				Mapping: {
					"id"          -->i_empl,
					"active"      -->p_activeEmployee(i_empl),
					"description" -->sp_employeeDescription( i_empl )
				}
			}
			Procedure pr_readEmployeeDB {
				Body: {
					empty Employees;
					
					read from table db_readEmployees;
				}
			}
			Procedure pr_writeEmployeeDB {
				Body: {
					write sp_employeeDescription(i_empl), 
					        p_activeEmployee(i_empl) 
					    to table db_readEmployees in dense mode;
				}
			}
		}
		Section DB_Restaurant {
			DatabaseTable db_readRestaurants {
				DataSource: sp_connectionString;
				TableName: "restaurant";
				Mapping: {
					"id"          -->i_rest,
					"active"      -->p_activeRestaurant(i_rest),
					"description" -->sp_restaurantDescription(i_rest)
				}
			}
			Procedure pr_readRestaurantDB {
				Body: {
					empty Restaurants;
					
					read from table db_readRestaurants;
				}
			}
			Procedure pr_writeRestaurantDB {
				Body: {
					write sp_restaurantDescription(i_rest), 
					        p_activeRestaurant(i_rest)
					    to table db_readRestaurants in dense mode;
				}
			}
		}
		Section DB_Employee_Shift {
			DatabaseTable db_readEmployeeShifts {
				DataSource: sp_connectionString;
				TableName: "employee_shift";
				Mapping: {
					"employee_id" -->i_empl,
					"shift_id"    -->i_sh,
					"value"       -->p_employeeDoesShift(i_empl, i_sh)
				}
			}
			Procedure pr_readEmployeeShiftsDB {
				Body: {
					empty Employee_Shift;
					
					read from table db_readEmployeeShifts;
				}
			}
			Procedure pr_writeEmployeeShiftsDB {
				Body: {
					write p_employeeDoesShift(i_empl, i_sh)
					    to table db_readEmployeeShifts in dense mode;
				}
			}
		}
		Section DB_Employee_Skill {
			DatabaseTable db_readEmployeeSkills {
				DataSource: sp_connectionString;
				TableName: "employee_skill";
				Mapping: {
					"employee_id"      -->i_empl,
					"skill_id"         -->i_sk,
					"has_skill"        -->p_employeeHasSkill,
					"skill_preference" -->p_employeeSkillPreference
				}
			}
			Procedure pr_readEmployeeSkillDB {
				Body: {
					empty Employee_Skill;
					
					read from table db_readEmployeeSkills;
				}
			}
			Procedure pr_writeEmployeeSkillDB {
				Body: {
					write p_employeeHasSkill(i_empl, i_sk),
					        p_employeeSkillPreference(i_empl, i_sk)
					    to table db_readEmployeeSkills in dense mode;
				}
			}
		}
		Section DB_Demand {
			DatabaseTable db_readDemands {
				DataSource: sp_connectionString;
				TableName: "demand";
				Mapping: {
					"restaurant_id" -->i_rest,
					"skill_id"      -->i_sk,
					"shift_id"      -->i_sh,
					"demand"        -->p_demand
				}
			}
			Procedure pr_readDemandDB {
				Body: {
					empty Demand;
					
					read from table db_readDemands;
				}
			}
			Procedure pr_writeDemandDB {
				Body: {
					write p_demand(i_rest, i_sh, i_sk)
					    to table db_readDemands in dense mode;
				}
			}
		}
	}
	Section Application_initialization_and_termination {
		Procedure MainInitialization;
		Procedure PostMainInitialization {
			Body: {
				ep_selectedRestaurant := '';
				ep_selectedEmployee := '';
			}
		}
		Procedure MainExecution;
		Procedure PreMainTermination {
			Body: {
				return 1 ;
			}
		}
		Procedure MainTermination {
			Body: {
				return 1;
			}
		}
	}
}
